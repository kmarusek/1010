@Grid--columns: 12;
@Grid--gutter_width: 30px;
@Grid--emulation_width: @Viewport-md;
//Determines what width the fallback percentages are calculated at.

// **** Superior grid system with REAL GUTTERS **** //

//Columns with no gutters
.make-Column(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) when (@_ = "") {
    float: @float;
    width: (@column-width / @Grid--columns * @Grid--parent_width);

    min-height: 1px;
}

.make-Column(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) {
    min-height: 1px;

    @media (min-width: @min-breakpoint) {
        float: @float;
        width: (@column-width / @Grid--columns * @Grid--parent_width);
    }
}

//Columns with margin-based gutters
.make-Column--gutter(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) when (@_ = "") {
    margin-left: (@Grid--gutter_width / 2);
    margin-right: (@Grid--gutter_width / 2);

    min-height: 1px;

    float: @float;
    width: ((@Grid--emulation_width * @column-width / @Grid--columns - @Grid--gutter_width) / @Grid--emulation_width * @Grid--parent_width);
    width: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"-"@Grid--gutter_width~")";
}

.make-Column--gutter(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) {
    margin-left: (@Grid--gutter_width / 2);
    margin-right: (@Grid--gutter_width / 2);

    min-height: 1px;

    @media (min-width: @min-breakpoint) {
        float: @float;
        width: ((@Grid--emulation_width * @column-width / @Grid--columns - @Grid--gutter_width) / @Grid--emulation_width * @Grid--parent_width);
        width: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"-"@Grid--gutter_width~")";
    }
}

.make-Column--gutter(@column-width; min-gutters; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) {
    min-height: 1px;

    @media (min-width: @min-breakpoint) {
        float: @float;
        width: ((@Grid--emulation_width * @column-width / @Grid--columns - @Grid--gutter_width) / @Grid--emulation_width * @Grid--parent_width);
        width: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"-"@Grid--gutter_width~")";

        margin-left: (@Grid--gutter_width / 2);
        margin-right: (@Grid--gutter_width / 2);
    }
}

//Columns with padding-based gutters
.make-Column--padded(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) when (@_ = "") {
    float: @float;
    width: (@column-width / @Grid--columns * @Grid--parent_width);
    padding-left: (@Grid--gutter_width / 2);
    padding-right: (@Grid--gutter_width / 2);

    min-height: 1px;
}

.make-Column--padded(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @float: left; @Grid--parent_width: 100%) {
    padding-left: (@Grid--gutter_width / 2);
    padding-right: (@Grid--gutter_width / 2);

    min-height: 1px;

    @media (min-width: @min-breakpoint) {
        float: @float;
        width: (@column-width / @Grid--columns * @Grid--parent_width);
    }
}

// **** Offsets of various forms **** //

//Offsets for margin-based gutters
.make-Column--gutter-offset(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) when (@_ = "") {
    margin-left: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
    margin-left: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
}

.make-Column--gutter-offset(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) {
    @media (min-width: @min-breakpoint) {
        margin-left: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
        margin-left: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
    }
}

//Offsets for padding-based gutters
.make-Column--padded-offset(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) when (@_ = "") {
    padding-left: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
    padding-left: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
}

.make-Column--padded-offset(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) {
    @media (min-width: @min-breakpoint) {
        padding-left: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
        padding-left: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
    }
}

//After-offsets for margin-based gutters
.make-Column--gutter-after(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) when (@_ = "") {
    margin-right: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
    margin-right: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
}

.make-Column--gutter-after(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) {
    @media (min-width: @min-breakpoint) {
        margin-right: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
        margin-right: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
    }
}

//After-offsets for padding-based gutters
.make-Column--padded-after(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) when (@_ = "") {
    padding-right: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
    padding-right: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
}

.make-Column--padded-after(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) {
    @media (min-width: @min-breakpoint) {
        padding-right: (@column-width / @Grid--columns * @Grid--emulation_width + @Grid--gutter_width / 2);
        padding-right: ~"calc("(@column-width / @Grid--columns * @Grid--parent_width)~"+"(@Grid--gutter_width / 2)~")";
    }
}

//Offsets for gutterless columns
.make-Column-offset(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) when (@_ = "") {
    margin-left: (@column-width / @Grid--columns * @Grid--parent_width);
}

.make-Column-offset(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) {
    @media (min-width: @min-breakpoint) {
        margin-left: (@column-width / @Grid--columns * @Grid--parent_width);
    }
}

//After-offsets for gutterless columns
.make-Column-after(@column-width; @_: ""; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) when (@_ = "") {
    margin-right: (@column-width / @Grid--columns * @Grid--parent_width);
}

.make-Column-after(@column-width; min; @min-breakpoint: 0px; @Grid--gutter_width: @Grid--gutter_width; @Grid--parent_width: 100%) {
    @media (min-width: @min-breakpoint) {
        margin-right: (@column-width / @Grid--columns * @Grid--parent_width);
    }
}

//Requires position: relative
.make-Column-push(@columns-to-push; @_: ""; @Grid--parent_width: 100%) when (@_ = "") {
    left: (@columns-to-push / @Grid--columns * @Grid--parent_width);
}

.make-Column-pull(@columns-to-pull; @_: ""; @Grid--parent_width: 100%) when (@_ = "") {
    right: (@columns-to-pull / @Grid--columns * @Grid--parent_width);
}

.make-Column-push(@columns-to-push; min; @min-breakpoint: 0px) {
    @media (min-width: @min-breakpoint) {
        .make-Column-push(@columns-to-push);
    }
}

.make-Column-pull(@columns-to-pull; min; @min-breakpoint: 0px) {
    @media (min-width: @min-breakpoint) {
        .make-Column-pull(@columns-to-pull);
    }
}

//Rows, for knocking out parent gutters.
.make-Row(@Grid--gutter_width: @Grid--gutter_width) {
    margin-left: (@Grid--gutter_width / -2);
    margin-right: (@Grid--gutter_width / -2);
}

.make-Gutter(@Grid--gutter_width: @Grid--gutter_width) {
    margin-left: (@Grid--gutter_width / 2);
    margin-right: (@Grid--gutter_width / 2);
}

.make-Padding(@Grid--gutter_width: @Grid--gutter_width) {
    padding-left: (@Grid--gutter_width / 2);
    padding-right: (@Grid--gutter_width / 2);
}

/* A Matrix is a series of equally sized elements arranged like Columns, but
 * with the ability to break correctly.
 *
 * It is possible to add interior borders to a Matrix akin to that of an HTML
 * table.
 */
.make-Matrix(@Matrix--column_count: 2; @_: ""; @Border-width: @Border-width; @Border-color: @Border-color) when (@_ = "") {
    .clearfix();

    > * {
        .make-Column(@Grid--columns / @Matrix--column_count);
        border: @Border-width solid @Border-color;
        border-width: @Border-width 0 0 @Border-width;

        &:nth-child(@{Matrix--column_count}n+1) {
            border-left-color: transparent;
            clear: none;
        }

        &:nth-child(-n+@{Matrix--column_count}) {
            border-top-color: transparent;
        }
    }
}

.make-Matrix(@Matrix--column_count: 4; min; @min-breakpoint; @Matrix--previous_column_count: 0; @Border-width: @Border-width; @Border-color: @Border-color) {
    .clearfix();

    > * {
        .make-Column(@Grid--columns / @Matrix--column_count; min; @min-breakpoint);
    }

    @media (min-width: @min-breakpoint) {
        > * {
            border: @Border-width solid @Border-color;
            border-width: @Border-width 0 0 @Border-width;

            &:nth-child(@{Matrix--previous_column_count}n+1) {
                border-left-color: @Border-color;
                clear: none;
            }

            &:nth-child(-n+@{Matrix--previous_column_count}) {
                border-top-color: @Border-color;
            }

            &:nth-child(@{Matrix--column_count}n+1) {
                border-left-color: transparent;
                clear: left;
            }

            &:nth-child(-n+@{Matrix--column_count}) {
                border-top-color: transparent;
            }
        }
    }
}

.clearfix() {
    &:extend(.clearfix all);
}
