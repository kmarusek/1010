{"version":3,"file":"frontend.js","names":["jQuery","$","BWVideoPlayer","settings","element","init","prototype","nodeID","self","id","videoPlayerType","plyrObject","Plyr","find","click","_playVideoModal","_playVideoInline","addClass","videoSource","_playVideoInlineYouTube","_playVideoInlineUpload","on","proxy","_resetVideoPlayerInline","setTimeout","play","uniqueId","unique_id","attr","youtube_id","data","youTubePlayer","_initYouTubeVideo","playVideo","element_id","YT","Player","videoId","events","onReady","_onYouTubePlayerReady","bind","onStateChange","_onYouTubePlayerStateChange","playerVars","enablejsapi","removeClass","_resetVideoPlayerUpload","restart","event","target","_initModalVideoYouTube","_initModalVideoUpload","content","html","videoModalObject","featherlight","variant","openSpeed","closeSpeed","beforeOpen","afterOpen","afterClose","afterContent"],"sources":["components/VideoPlayer/bw-video-player/js/frontend.prebuilt.js"],"sourcesContent":["jQuery(function($){\r\n\r\n    /**\r\n     * Main class for our BWVideoPlayer\r\n     */\r\n     BWVideoPlayer = function( settings ) {\r\n        this.element  = settings.element;\r\n        this.settings = settings;\r\n        this.init();\r\n    };\r\n\r\n    BWVideoPlayer.prototype = {\r\n\r\n        /**\r\n         * The node id for this instance.\r\n         *\r\n         * @type {String}\r\n         */\r\n         nodeID: '',\r\n\r\n        /**\r\n         * Our element\r\n         *\r\n         * @type {Object}\r\n         */\r\n         element: '',\r\n\r\n        /**\r\n         * Where to store all settings\r\n         *\r\n         * @type {Object}\r\n         */\r\n         settings : {},\r\n\r\n        /**\r\n         * The main method.\r\n         *\r\n         * @return {void}\r\n         */\r\n         init : function(){\r\n            // Declare self outside of block\r\n            var self = this;\r\n\r\n            this.nodeID = 'video-node-' + self.settings.id;\r\n\r\n            // If this is an inline video, create the player object immediately\r\n            if ( self.settings.videoPlayerType === 'inline' ){\r\n                this.plyrObject = new Plyr( this.element.find( '.video-container video')  );\r\n            }\r\n\r\n            // Bind the play button\r\n            this.element\r\n            .find( '.video-play-button' )\r\n            .click(function(){\r\n                // Handle our action\r\n                switch( self.settings.videoPlayerType ){\r\n\r\n                    // For modals\r\n                    case 'modal':\r\n                    self._playVideoModal();\r\n                    break;\r\n\r\n                    // For inline\r\n                    case 'inline':\r\n                    self._playVideoInline();\r\n                    break;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method used to handle playing the inline video. \r\n         *\r\n         * @return {void}\r\n         */\r\n         _playVideoInline: function(){\r\n            // Curtains up\r\n            this.element\r\n            .find( '.video-inline-container' )\r\n            .addClass( 'video-active' );\r\n            // Figure out how to handle playing the video\r\n            switch ( this.settings.videoSource ){\r\n                case 'youtube':\r\n                this._playVideoInlineYouTube();\r\n                break;\r\n\r\n                default:\r\n                this._playVideoInlineUpload();\r\n                break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to play an inline video that is uploaded.\r\n         *\r\n         * @return {void}\r\n         */\r\n         _playVideoInlineUpload: function(){\r\n            var self = this;\r\n            // Add our event listening. We need to reset this once the video is completed.\r\n            this.plyrObject.on( 'ended', $.proxy(this._resetVideoPlayerInline, this ) );\r\n            // Get the content\r\n            setTimeout(function(){\r\n                // Play the video\r\n                self.plyrObject.play();\r\n            }, 1000 );\r\n        },\r\n\r\n        /**\r\n         * Method use to handle playing an inline video that is linked from YouTube.\r\n         *\r\n         * @return {void}\r\n         */\r\n         _playVideoInlineYouTube: function(){\r\n            this.element.find( '.video-source' ).uniqueId();\r\n            var unique_id = this.element.find( '.video-source' ).attr('id');\r\n            var youtube_id = $('#' + unique_id ).data('youtube-embed-id');\r\n            if ( !this.youTubePlayer ){\r\n                this._initYouTubeVideo( unique_id, youtube_id );\r\n            }\r\n            else {\r\n                this.youTubePlayer.playVideo();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to init the YouTube video from any type of view.\r\n         *\r\n         * @param  {string} element_id The element ID to place the video\r\n         * @param  {string} youtube_id The YouTube ID of the video to use\r\n         *\r\n         * @return {void}\r\n         */\r\n        _initYouTubeVideo: function( element_id, youtube_id){\r\n            this.youTubePlayer = new YT.Player(element_id, {\r\n                videoId : youtube_id,\r\n                events  : {\r\n                    onReady       : this._onYouTubePlayerReady.bind(this),\r\n                    onStateChange : this._onYouTubePlayerStateChange.bind(this)\r\n                },\r\n                playerVars: {\r\n                    enablejsapi: true\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to handle resetting the video player when set to inline.\r\n         *\r\n         * @return {void}\r\n         */\r\n         _resetVideoPlayerInline: function(){\r\n            // Reset the cutains\r\n            this.element\r\n            .find( '.video-inline-container.video-active' )\r\n            .removeClass( 'video-active' );\r\n            switch ( this.settings.videoSource ){\r\n                default:\r\n                this._resetVideoPlayerUpload();\r\n                break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to add any logic required to cleanup the video player\r\n         * for uploaded videos after it's finished running.\r\n         *\r\n         * @return {void}\r\n         */\r\n        _resetVideoPlayerUpload: function(){\r\n            // Declare self outside of block\r\n            var self = this;\r\n\r\n            setTimeout(function(){\r\n                // Rewind the video\r\n                self.plyrObject.restart();\r\n            }, 300 );\r\n        },\r\n\r\n        /**\r\n         * Callback used to actually play the YouTube video.\r\n         *\r\n         * @param  {object} event The event sent from the YouTube API\r\n         *\r\n         * @return {void}     \r\n         */\r\n         _onYouTubePlayerReady: function( event ){\r\n            event.target.playVideo();\r\n        },\r\n\r\n        /**\r\n         * A callback for when the YouTube state changes. This is particularly useful\r\n         * for checking the progress of the video.\r\n         *\r\n         * @param  {object} event The event sent from the YouTube API\r\n         *\r\n         * @return {void}     \r\n         */\r\n        _onYouTubePlayerStateChange: function( event ){\r\n            if(event.data === 0) {          \r\n                if ( this.settings.videoPlayerType === 'inline' ){\r\n                    this._resetVideoPlayerInline();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * This method is called for creating the YouTube iFrame on the modal option\r\n         *\r\n         * @return {void}\r\n         */\r\n         _initModalVideoYouTube: function(){\r\n            $('.featherlight.' + this.nodeID + ' .video-source').uniqueId();\r\n            var unique_id = $('.featherlight.' + this.nodeID + ' .video-source').attr('id');\r\n            var youtube_id = $('#' + unique_id ).data('youtube-embed-id');\r\n            this._initYouTubeVideo( unique_id, youtube_id );\r\n        },\r\n        \r\n        /**\r\n         * Method used to init the modal when it contains an \r\n         *\r\n         * @return {void}\r\n         */\r\n         _initModalVideoUpload(){\r\n            // Declare self outside of block\r\n            var self = this;\r\n            // Find the video\r\n            self.plyrObject = new Plyr( $('.featherlight.' + self.nodeID + ' video')  );\r\n            // Play after a brief pause so we don't startle the user\r\n            setTimeout(function(){\r\n                self.plyrObject.play();\r\n            }, 500);\r\n        },\r\n\r\n        /**\r\n         * Method used to show the video modal. \r\n         *\r\n         * @return {void}\r\n         */\r\n         _playVideoModal: function(){\r\n            // Declare self outside of block\r\n            var self = this,\r\n            // Get the content\r\n            content = this.element.find( '.video-content' ).html();\r\n            // Init the featherlight object\r\n            this.videoModalObject = $.featherlight( content, {\r\n                variant    : self.nodeID + ' bw-video-player-modal',\r\n                openSpeed  : 0,\r\n                closeSpeed : 0,\r\n                beforeOpen : function(){\r\n                    $('body')\r\n                    .addClass( 'bw-video-modal-open' )\r\n                    .addClass( 'bw-video-modal-open-' + self.nodeID );\r\n                },\r\n                afterOpen : function(){\r\n                    $('.featherlight.' + self.nodeID )\r\n                    .addClass( 'featherlight-visible' );\r\n                },\r\n                afterClose : function(){\r\n                    $( 'body')\r\n                    .removeClass( 'bw-video-modal-open' )\r\n                    .removeClass( 'bw-video-modal-open-' + self.nodeID );\r\n                },\r\n                afterContent : function(){\r\n                    switch ( self.settings.videoSource ){\r\n                        case 'youtube':\r\n                        self._initModalVideoYouTube();\r\n                        break;\r\n\r\n                        default:\r\n                        self._initModalVideoUpload();\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n});"],"mappings":"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"}